---
- name: Gather facts from vCenter (cookie auth)
  gather_facts: no
  hosts: localhost
  tasks:
    - name: Check if we need a cookie first
      import_tasks: vcenter_login.yml
      when: (login is not defined) or (not login.set_cookie)

    - name: Get all available hosts
      uri:
        url: https://{{ vsphere.host[vsphere_var].dest }}/rest/vcenter/host
        force_basic_auth: yes
        validate_certs: "{{ vsphere.host[vsphere_var].validate_certs }}"
        headers:
            Cookie: "{{ login.set_cookie }}"
      register: vchosts

    - name: Get networks
      uri:
        url: https://{{ vsphere.host[vsphere_var].dest }}/rest/vcenter/network
        force_basic_auth: yes
        validate_certs: "{{ vsphere.host[vsphere_var].validate_certs }}"
        headers:
          Cookie: "{{ login.set_cookie }}"
      register: vnetworks

    - name: Get datastores
      uri:
        url: https://{{ vsphere.host[vsphere_var].dest }}/rest/vcenter/datastore
        force_basic_auth: yes
        validate_certs: "{{ vsphere.host[vsphere_var].validate_certs }}"
        headers:
          Cookie: "{{ login.set_cookie }}"
      register: vdatastores

    - name: Get datacenters
      uri:
        url: https://{{ vsphere.host[vsphere_var].dest }}/rest/vcenter/datacenter
        force_basic_auth: yes
        validate_certs: "{{ vsphere.host[vsphere_var].validate_certs }}"
        headers:
          Cookie: "{{ login.set_cookie }}"
      register: vdatacenters

    # datacenters
    - name: Clear/Prepare datastore temp file
      copy:
        content: "datacenter_name;"
        dest: "{{ inventory_dir }}/tmp/{{ vsphere_var }}_datacenters.list"

    - name: Collecting datacenters of the given vCenter
      lineinfile:
        line: "{{ item.name }};"
        path: "{{ inventory_dir }}/tmp/{{ vsphere_var }}_datacenters.list"
      with_items: "{{ vdatacenters.json.value | sort }}"

    # datastores
    - name: Clear/Prepare datastore temp file
      copy:
        content: "datastore_name;free_space_kb"
        dest: "{{ inventory_dir }}/tmp/{{ vsphere_var }}_datastores.list"

    - name: Collecting datastores of the given vCenter
      lineinfile:
        line: "{{ item.name }};{{ item.free_space }}"
        path: "{{ inventory_dir }}/tmp/{{ vsphere_var }}_datastores.list"
      with_items: "{{ vdatastores.json.value | sort(attribute='name')}}"

    # networks
    - name: Clear/Prepare networks temp file
      copy:
        content: "network_name;"
        dest: "{{ inventory_dir }}/tmp/{{ vsphere_var }}_networks.list"

    - name: Collecting networks of the given vCenter
      lineinfile:
        line: "{{ item.name }};"
        path: "{{ inventory_dir }}/tmp/{{ vsphere_var }}_networks.list"
      with_items: "{{ vnetworks.json.value | sort }}"

    # ESX hosts
    - name: Clear/Prepare vchosts temp file
      copy:
        content: "esx_name;power_state"
        dest: "{{ inventory_dir }}/tmp/{{ vsphere_var }}_vchosts.list"

    - name: Collecting vchosts of the given vCenter
      lineinfile:
        line: "{{ item.name }};{{ item.power_state }}"
        path: "{{ inventory_dir }}/tmp/{{ vsphere_var }}_vchosts.list"
      with_items: "{{ vchosts.json.value | sort(attribute='name') }}"

